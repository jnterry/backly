#!/usr/bin/perl -Ilib/

use strict;
use warnings;

use Backly::Config   qw(load_config);
use Backly::Snapshot qw(create_live_volume create_snapshot delete_old_snapshots);

use File::Tee  qw(tee);
use File::Path qw(make_path);
use Getopt::Long::Descriptive qw(describe_options);
use Module::Load;
use Try::Tiny;
use YAML qw(LoadFile);

use Data::Dumper;

my ($cli) = describe_options(
	'backly %o',
	[ 'service|s=s',   'Name of service to run backup for',
		{ required => 1 }
  ],
	[ 'identity|i=s', 'Path to ssh key to use to connect to host(s)',
		{ default => undef }
	],
	[ 'keep-snapshots|k', 'If set, will ignore retention config and keep all existing snapshots',
		{ default => undef }
	],
);

exit main();

sub main {
	# Load global backly config
	my $config = load_config();
	$config->{ssh}{key_path} = $cli->{identity} if $cli->{identity};

	# Load service specific config
	my $service    = _load_service_config($config, $cli->{service});
	my $serviceDir = $config->{destination} . "/" . ($service->{name} || $cli->{service});

	# Create a new btrfs subvolume for the live data
	my $liveDir = create_live_volume($serviceDir);

	# Duplicate the backup's log to the target directory
	my $log_path = "${liveDir}/backly-log.txt";
	truncate $log_path, 0;
	tee STDOUT, '>>', $log_path;
	tee STDERR, '>>', $log_path;

	# Perform backup tasks
	my $success = _run_tasks($config, $liveDir, $service);

	# Create read-only snapshot
	create_snapshot($serviceDir, $success);

	# Remove any out of date snapshots
	my $retentionConfig = $service->{retention} || $config->{default_retention};
	if($cli->{keep_snapshots}){
		print "Not deleting old snapshots due to cli arguments\n";
	} elsif (!defined $retentionConfig) {
		print "No retention config for service - keeping all snapshots\n";
	} elsif (!$success) {
		print "Skipping deleting old snapshots since backup was not fully successful\n";
	} else {
		delete_old_snapshots($serviceDir, $retentionConfig);
	}

	return $success ? 0 : 1;
}

# Helper to load the service config from yaml and perform some initial validation
sub _load_service_config {
	my ($config, $name) = @_;

	my $path = ($config->{services} || '/etc/backly/services.d') . "/${name}.yaml";

	die "No config for service ${name} at $path" unless -f $path;

	my $service = LoadFile($path);

	die "Service $name does not include task list" unless $service->{tasks};

	foreach my $task (@{$service->{tasks}}) {
		die "Service '$name' includes task without name" unless $task->{name};
		die "Service '$name', task '$task->{name}' does not have a type" unless $task->{type};
	}

	return $service;
}

# Helper which runs the individual tasks within a service
sub _run_tasks {
	my ($config, $serviceDir, $service) = @_;

	my $failed = 0;
	my $taskCount = @{$service->{tasks}};

	print "Running $taskCount tasks for service '$service->{name}'\n";

	for my $task (@{$service->{tasks}}) {

		print "Running $task->{type} task: $task->{name}\n";

		my $pkg = "Backly::Task::" . ucfirst($task->{type});

		my $gotModule = 1;
		eval "require $pkg" or do {
			print STDERR "No implementation for task type '$task->{type}': $@\n";
			$gotModule = 1;
			++$failed;
		};
		next unless $gotModule;

		my $taskTarget = "${serviceDir}/$task->{name}";
		make_path($taskTarget);

		my $fullTaskConfig = $task;
		if($config->{task_defaults}{$task->{type}}){
			$fullTaskConfig = { %{$config->{task_defaults}{$task->{type}}}, %$task };
		}
		try {
			$pkg->backup($config, $taskTarget, $fullTaskConfig);
		} catch {
			print STDERR $_;
			++$failed;
		}
	}

	print "$failed of $taskCount tasks failed\n" if $failed;

	return !$failed;
}
