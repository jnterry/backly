#!/usr/bin/perl -Ilib/

use strict;
use warnings;

use Backly::Config qw(load_config);

use File::Tee  qw(tee);
use File::Path qw(make_path);
use Getopt::Long::Descriptive qw(describe_options);
use Module::Load;
use POSIX;
use Try::Tiny;
use YAML qw(LoadFile);

use Data::Dumper;

my ($cli) = describe_options(
	'backly %o',
	[ 'service|s=s',   'Name of service to run backup for',
		{ required => 1 }
  ],
	[ 'identity|i=s', 'Path to ssh key to use to connect to host(s)',
		{ default => undef }
	],
);

exit main();

sub main {

	my $config = load_config();
	$config->{ssh}{key_path} = $cli->{identity} if $cli->{identity};

	my $service = LoadFile(($config->{services} || '/etc/backly/services.d') . '/' . $cli->{service} . '.yaml');

	my $targetDir = $config->{destination} . "/" . ($service->{name} || $cli->{service});

  make_path($targetDir);

	my $timestamp = strftime "%Y%m%d_%H%M", localtime time;

	# Create a new btrfs subvolume for the live data
	unless(-d "$targetDir/live") {
		qx|/usr/bin/btrfs subvolume create $targetDir/live|;
	}

	# Duplicate the backup's log to the target directory
	my $log_path = "${targetDir}/live/backly-log.txt";
	truncate $log_path, 0;
	tee STDOUT, '>>', $log_path;
	tee STDERR, '>>', $log_path;

	# Perform backup tasks
	my $success = _run_tasks($config, "$targetDir/live", $service);

	# Create read-only snapshot
	my $snapshot_suffix = '';
	$snapshot_suffix = '-failed' unless($success);
	my $snapshot_name = "${timestamp}${snapshot_suffix}";

	print "All backup tasks complete, creating snapshot ${snapshot_name}...\n";
	make_path("$targetDir/snapshots");
	qx|/usr/bin/btrfs subvolume snapshot -r $targetDir/live $targetDir/snapshots/${timestamp}${snapshot_suffix}|;
	print "Snapshot created\n";

	return 0;
}

sub _run_tasks {
	my ($config, $targetDir, $service) = @_;

	my $failed = 0;
	my $taskCount = @{$service->{tasks}};

	print "Running $taskCount tasks for service '$service->{name}'\n";

	for my $task (@{$service->{tasks}}) {

		print "Running $task->{type} task: $task->{name}\n";

		my $pkg = "Backly::Task::" . ucfirst($task->{type});

		my $gotModule = 1;
		eval "require $pkg" or do {
			print STDERR "No implementation for task type '$task->{type}': $@\n";
			$gotModule = 1;
			++$failed;
		};
		next unless $gotModule;

		my $taskTarget = "${targetDir}/$task->{name}";
		make_path($taskTarget);

		my $fullTaskConfig = $task;
		if($config->{task_defaults}{$task->{type}}){
			$fullTaskConfig = { %{$config->{task_defaults}{$task->{type}}}, %$task };
		}
		try {
			$pkg->backup($config, $taskTarget, $fullTaskConfig);
		} catch {
			print STDERR $_;
			++$failed;
		}
	}

	print "$failed of $taskCount tasks failed\n" if $failed;

	return !$failed;
}
